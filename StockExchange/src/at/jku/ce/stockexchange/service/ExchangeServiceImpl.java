
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package at.jku.ce.stockexchange.service;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import at.jku.ce.stockexchange.database.DBConnect;

/**
 * This class was generated by Apache CXF 2.3.7
 * 2013-12-08T16:00:29.751+01:00
 * Generated source version: 2.3.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "ExchangeServiceService",
                      portName = "ExchangeServicePort",
                      targetNamespace = "http://service.stockexchange.ce.jku.at/",
                      wsdlLocation = "http://140.78.73.67:8080/CEStockExchangeWS/services/exchangeservice?wsdl",
                      endpointInterface = "at.jku.ce.stockexchange.service.ExchangeService")
                      
public class ExchangeServiceImpl implements ExchangeService {

    private static final Logger LOG = Logger.getLogger(ExchangeServiceImpl.class.getName());
    
    private List<Stock> stockList = new ArrayList<Stock>();
    
    private static final StockExchange stockExchange = new StockExchange("L3", "L3exchange");
    
    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#buyStock(java.lang.String  arg0 ,)int  arg1 )*
     */
    public at.jku.ce.stockexchange.service.Exchange buyStock(java.lang.String arg0,int arg1) { 
        LOG.info("Executing operation buyStock");
        System.out.println(arg0);
        System.out.println(arg1);
        try {
//            at.jku.ce.stockexchange.service.Exchange _return = new at.jku.ce.stockexchange.service.Exchange();
//            _return.setExchangeDate(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-12-08T15:50:23.428+01:00"));
//            _return.setExecution(161446178);
//            _return.setOrder(-115833687);
//            _return.setSale(true);
//            at.jku.ce.stockexchange.service.Stock _returnStock = new at.jku.ce.stockexchange.service.Stock();
//            _returnStock.setAvailability(757977868);
//            _returnStock.setCurrency("Currency-178304350");
//            _returnStock.setIsin("Isin-846573334");
//            _returnStock.setName("Name867374292");
//            _returnStock.setPrice(Double.valueOf(0.04654274104305156));
//            _returnStock.setPublication(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-12-08T15:50:23.429+01:00"));
//            _return.setStock(_returnStock);
//            at.jku.ce.stockexchange.service.StockExchange _returnStockExchange = new at.jku.ce.stockexchange.service.StockExchange();
//            _returnStockExchange.setMic("Mic-900873175");
//            _returnStockExchange.setName("Name-762829279");
//            _return.setStockExchange(_returnStockExchange);
//            return _return;
			String isin = arg0;
			int order = arg1;
			Exchange exchange = null;
			int execution;
			
			//select stock
			Stock stock = getStock(isin);
			if(stock != null){
				//check availability and set execution
			    if(stock.getAvailability() >= arg1){
			    	execution = order;
			    }else{
			    	execution = stock.getAvailability();
			    }
			    //update amount of stocks
			    stock.setAvailability(stock.getAvailability() - execution);
			    
			    exchange = new Exchange(getCurrentDate(), execution, order, false, stock, stockExchange);
			    
			    //TODO: write to DB
			    DBConnect.addExchange(exchange);
			    
			    return exchange;
			}
			return null;
		} catch (java.lang.Exception ex) {
		    ex.printStackTrace();
		    throw new RuntimeException(ex);
		}
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#getExchanges(*
     */
    public java.util.List<at.jku.ce.stockexchange.service.Exchange> getExchanges() { 
        LOG.info("Executing operation getExchanges");
        try {
//            java.util.List<at.jku.ce.stockexchange.service.Exchange> _return = new java.util.ArrayList<at.jku.ce.stockexchange.service.Exchange>();
//            at.jku.ce.stockexchange.service.Exchange _returnVal1 = new at.jku.ce.stockexchange.service.Exchange();
//            _returnVal1.setExchangeDate(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-12-08T15:50:23.430+01:00"));
//            _returnVal1.setExecution(1257629720);
//            _returnVal1.setOrder(1397546542);
//            _returnVal1.setSale(true);
//            at.jku.ce.stockexchange.service.Stock _returnVal1Stock = new at.jku.ce.stockexchange.service.Stock();
//            _returnVal1Stock.setAvailability(-811323384);
//            _returnVal1Stock.setCurrency("Currency1763740147");
//            _returnVal1Stock.setIsin("Isin921208669");
//            _returnVal1Stock.setName("Name-663284246");
//            _returnVal1Stock.setPrice(Double.valueOf(0.10439370544494364));
//            _returnVal1Stock.setPublication(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-12-08T15:50:23.431+01:00"));
//            _returnVal1.setStock(_returnVal1Stock);
//            at.jku.ce.stockexchange.service.StockExchange _returnVal1StockExchange = new at.jku.ce.stockexchange.service.StockExchange();
//            _returnVal1StockExchange.setMic("Mic-2001050064");
//            _returnVal1StockExchange.setName("Name-889631284");
//            _returnVal1.setStockExchange(_returnVal1StockExchange);
//            _return.add(_returnVal1);
//            return _return;
            
            //TODO: connect to DB and get all exchanges
            
            return DBConnect.getExchanges(stockExchange);
            
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#sellStock(java.lang.String  arg0 ,)int  arg1 )*
     */
    public void sellStock(java.lang.String arg0,int arg1) { 
        LOG.info("Executing operation sellStock");
        System.out.println(arg0);
        System.out.println(arg1);
        try {
        	String isin = arg0;
        	int order = arg1;
        	
        	Stock stock = getStock(isin);
        	if(stock!=null){
        		//TODO(maybe)
        		int execution=order;
        		
        		//update amount of stocks
        		stock.setAvailability(stock.getAvailability() + execution);
        		Exchange exchange = new Exchange(getCurrentDate(), execution, order, true, stock, stockExchange);
		        
		        //TODO: write to DB
        		DBConnect.addExchange(exchange);
        	}
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#getStock(java.lang.String  arg0 )*
     */
    public at.jku.ce.stockexchange.service.Stock getStock(java.lang.String arg0) { 
        LOG.info("Executing operation getStock");
        System.out.println(arg0);
        try {
//            at.jku.ce.stockexchange.service.Stock _return = new at.jku.ce.stockexchange.service.Stock();
//            _return.setAvailability(-664663998);
//            _return.setCurrency("Currency1078627339");
//            _return.setIsin("Isin1159140752");
//            _return.setName("Name-734581131");
//            _return.setPrice(Double.valueOf(0.7483187148995077));
//            _return.setPublication(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-12-08T15:50:23.432+01:00"));
//            return _return;
        	
        	String isin = arg0;
        	
        	for(Stock s : stockList){
        		if(s.getIsin().equalsIgnoreCase(isin))
        			return s;
        	}
        	return null;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#getTradedStocks(*
     */
    public java.util.List<at.jku.ce.stockexchange.service.Stock> getTradedStocks() { 
        LOG.info("Executing operation getTradedStocks");
        try {
//            java.util.List<at.jku.ce.stockexchange.service.Stock> _return = new java.util.ArrayList<at.jku.ce.stockexchange.service.Stock>();
//            at.jku.ce.stockexchange.service.Stock _returnVal1 = new at.jku.ce.stockexchange.service.Stock();
//            _returnVal1.setAvailability(300976336);
//            _returnVal1.setCurrency("Currency1124662422");
//            _returnVal1.setIsin("Isin-34448788");
//            _returnVal1.setName("Name-1951197949");
//            _returnVal1.setPrice(Double.valueOf(0.17567270170542082));
//            _returnVal1.setPublication(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2013-12-08T15:50:23.433+01:00"));
//            _return.add(_returnVal1);
//            return _return;
        	return stockList;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see at.jku.ce.stockexchange.service.ExchangeService#reset(*
     */
    public void reset() { 
        LOG.info("Executing operation reset");
        try {
        	stockList.clear();
        	
        	//add some stocks
        	stockList.add(new Stock(2000, "EUR", "AT123456789", "Lehman Brothers", 0.01, getCurrentDate()));
        	stockList.add(new Stock(1000, "EUR", "AT024680246", "Hypo Alpe Adria", 50.00, getCurrentDate()));
        	
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
    
    private XMLGregorianCalendar getCurrentDate() {
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		XMLGregorianCalendar calendar = null;

		try {
			calendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
		} catch (DatatypeConfigurationException e) {
			e.printStackTrace();
		}
		return calendar;
	}
}
